---
Resources:
  EMR:
    Type: AWS::EMR::Cluster
    Properties:
      LogUri:
        Fn::Join:
        - ""
        - - s3://
          - Ref: S3LogBucket
      Name: NewsAnalysis
      ReleaseLabel: emr-5.4.0
      JobFlowRole:
        Ref: InstanceProfile
      ServiceRole:
        Ref: EMRRole
      Applications:
      - Name: Spark
      - Name: Zeppelin
      BootstrapActions:
      - Name: GetCoreNLPJarsK
        ScriptBootstrapAction:
          Path: s3://warren-datasets/EmrBootstrap.sh
      Instances:
        CoreInstanceGroup:
          BidPrice: .27
          InstanceCount: 6
          InstanceType: m4.4xlarge
          Market: SPOT
          Name: Slave
        MasterInstanceGroup:
          BidPrice: .1
          InstanceCount: 1
          InstanceType: m4.xlarge
          Market: SPOT
          Name: Master
        Ec2KeyName: selfie-art-us-east
        Ec2SubnetId:
          Ref: PublicSubnet
        EmrManagedMasterSecurityGroup:
          Ref: PublicSecGroup
        EmrManagedSlaveSecurityGroup:
          Ref: PublicSecGroup
        HadoopVersion: 2.7.3
      Configurations:
      - Classification: spark-defaults
        ConfigurationProperties:
          spark.executor.memory: 16g
          spark.executor.instances: 18
          spark.executor.cores: 5
          spark.default.parallelism: 18
      - Classification: capacity-scheduler
        ConfigurationProperties:
          yarn.scheduler.capacity.resource-calculator: org.apache.hadoop.yarn.util.resource.DominantResourceCalculator
      - Classification: yarn-site
        ConfigurationProperties:
          yarn.nodemanager.resource.memory-mb: 64512
          yarn.nodemanager.resource.cpu-vcores: 15
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone: us-east-1d
      CidrBlock: 10.0.0.0/24
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: RouteTable
  AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Fn::GetAtt: [Vpc, DefaultNetworkAcl]
  PublicSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP ingress"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 8000
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        FromPort: 2049
        ToPort: 2049
        CidrIp: 0.0.0.0/0
  S3LogBucket:
    Type: AWS::S3::Bucket
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - "arn:aws:s3:::warren-datasets"
            - "arn:aws:s3:::warren-datasets/*"
            - Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - Ref: S3LogBucket
  EMRRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elasticmapreduce.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: IAMUser
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:CreateInstanceProfile
            - iam:AddRoleToInstanceProfile
            - iam:ListRoles
            - iam:GetPolicy
            - iam:GetInstanceProfile
            - iam:GetPolicyVersion
            - iam:AttachRolePolicy
            - iam:PassRole
            Resource: "*"
      - PolicyName: Ec2PowerUser
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: "*"